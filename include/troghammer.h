// knight.h
// Purpose: encapsulate the TROGHAMMER who appears on later levels

#pragma once
#include <bn_sprite_actions.h>
#include <bn_sprite_animate_actions.h>
#include <bn_random.h>
#include <bn_list.h>
#include "bn_sprite_items_knight.h"
#include "knight.h"
#include "common_stuff.h"




namespace trog {
    class troghammer : public knight { 
        private:
            // The amount of time until the troghammer spawns.
            unsigned short _timer, _waiting_time_per_state, _total_wait_time;

            troghammer_state _current_state;
            bn::list<troghammer_state, 4> _states;
            bn::optional<bn::sprite_scale_to_action> _over_the_hill;


            static constexpr short day_path[240] {-56, -56, -57, -57, -57, -58, -58, -59, -59, -59, -60, -60, -60, -60, -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, -60, -60, -60, -60, -59, -59, -58, -58, -58, -57, -57, -57, -57, -57, -56, -56, -56, -56, -56, -55, -55, -55, -55, -55, -55, -55, -55, -55, -56, -56, -56, -56, -56, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -56, -56, -55, -55, -55, -55, -55, -55, -54, -54, -54, -54, -54, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -54, -54, -54, -54, -54, -54, -55, -55, -55, -55, -55, -56, -56, -56, -57, -57, -57, -58, -58, -58, -58, -58, -59, -59, -59, -60, -60, -60, -60, -61, -61, -61, -61, -61, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -61, -61, -61, -61, -61, -61, -61, -60, -60, -60, -60, -60, -59, -59, -59, -59, -58, -58, -58, -57, -57, -56, -56, -56, -55, -55, -55, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -55, -55, -55, -55, -55, -55, -56, -56, -56, -56, -56, -56, -57, -57, -57, -57, -57, -58, -58, -58, -58, -58, -58, -58};
            static constexpr short dusk_path[240] {-58, -58, -57, -57, -57, -57, -57, -56, -56, -56, -56, -56, -56, -55, -55, -55, -55, -55, -55, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -55, -55, -55, -56, -56, -56, -57, -57, -58, -58, -58, -59, -59, -59, -59, -60, -60, -60, -60, -60, -61, -61, -61, -61, -61, -61, -61, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -61, -61, -61, -61, -61, -60, -60, -60, -60, -59, -59, -59, -58, -58, -58, -58, -58, -57, -57, -57, -56, -56, -56, -55, -55, -55, -55, -55, -54, -54, -54, -54, -54, -54, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -54, -54, -54, -54, -54, -55, -55, -55, -55, -55, -55, -56, -56, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -56, -56, -56, -56, -56, -55, -55, -55, -55, -55, -55, -55, -55, -55, -56, -56, -56, -56, -56, -57, -57, -57, -57, -57, -58, -58, -58, -59, -59, -60, -60, -60, -60, -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, -60, -60, -60, -60, -59, -59, -59, -58, -58, -57, -57, -57, -56, -56, -55, -55, -55, -55, -54};
            static constexpr short night_path[240] {-56, -57, -57, -57, -58, -58, -59, -59, -59, -60, -60, -60, -60, -61, -61, -61, -61, -61, -61, -61, -61, -60, -61, -61, -60, -60, -60, -60, -59, -59, -58, -58, -58, -57, -57, -57, -57, -57, -56, -56, -56, -56, -56, -55, -55, -55, -55, -55, -55, -55, -55, -55, -56, -56, -56, -56, -56, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -56, -56, -55, -55, -55, -55, -55, -55, -54, -54, -54, -54, -54, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -54, -54, -54, -54, -54, -54, -55, -55, -55, -55, -55, -56, -56, -56, -57, -57, -57, -58, -58, -58, -58, -58, -59, -59, -59, -60, -60, -60, -60, -61, -61, -61, -61, -61, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -61, -61, -61, -61, -61, -61, -61, -60, -60, -60, -60, -60, -59, -59, -59, -59, -58, -58, -58, -58, -57, -57, -56, -56, -56, -55, -55, -55, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -55, -55, -55, -55, -55, -55, -56, -56, -56, -56, -56, -56, -57, -57, -57, -57, -57, -58, -58, -58, -58, -58, -58, -58};
            static constexpr short dawn_path[240] {-60, -60, -59, -59, -59, -59, -59, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -57, -58, -58, -58, -58, -58, -58, -59, -59, -60, -60, -60, -61, -61, -61, -61, -62, -62, -62, -62, -62, -63, -63, -63, -63, -63, -63, -63, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -63, -63, -63, -63, -63, -62, -62, -62, -62, -61, -61, -61, -60, -60, -60, -60, -60, -59, -59, -59, -58, -58, -58, -58, -58, -58, -58, -58, -57, -57, -57, -57, -57, -57, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -57, -57, -57, -57, -57, -58, -58, -58, -58, -58, -58, -58, -58, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -59, -59, -59, -59, -59, -60, -60, -60, -61, -61, -62, -62, -62, -62, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -62, -62, -62, -62, -61, -61, -61, -60, -60, -59, -59, -59, -58, -58, -58, -58, -58, -58, -57};

            unsigned short _time_of_day;

            bool _new_state;



            void change_direction();
            void set_ycor_to_horizon();
            void advance_to_next_state();
            void init_current_state();

            void log_state(troghammer_state state);

        public:
            troghammer(const bn::fixed_point &pos, bool facingRight, int level, bn::random &rand);
            troghammer(troghammer_status status, bool facingRight, int level, bn::random &rand);
            virtual void update() final;
            // unsigned short get_waiting_time() {return _waiting_time;}
            bool in_play(){return _current_state == troghammer_state::ARRIVED && _timer >= 120;}

            bool awake_alert(){return _new_state && _current_state == troghammer_state::AWAKE;}
            bool arrived_alert() {return _new_state && _current_state == troghammer_state::ARRIVED;}
            bool coming_alert(){return _new_state && _current_state == troghammer_state::COMING;}
            bool inside_void_tower(){return _current_state == troghammer_state::ALERT;}

            void freeze() override final {_freeze_timer = TROG_HAMMER_FREEZE_TIME;}

            troghammer_status get_status();
    };
}